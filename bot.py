import telebot
import json
from telebot.types import ReplyKeyboardMarkup
from config import my_TOKEN
import logging
from gpt import GPT
from config import MAX_TOKENS

# @pomoshnik_ai_bot

bot = telebot.TeleBot(token=my_TOKEN)


# –û–±—ä–µ–∫—Ç GPT
gpt = GPT()


def save_to_json():
    with open('users_history.json', 'w', encoding='utf-8') as f:
        json.dump(users_history, f, indent=2, ensure_ascii=False)


def load_from_json():
    # noinspection PyBroadException
    try:
        with open('users_history.json', 'r+', encoding='utf-8') as f:
            data = json.load(f)
    except Exception:
        data = {}

    return data


# –°–ª–æ–≤–∞—Ä–∏–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ GPT
users_history = load_from_json()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏
def create_keyboard(buttons_list):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt",
    filemode="w")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_name = message.from_user.first_name
    bot.send_message(message.chat.id,
                     text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã/n"
                          "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±–∑–æ—Ä–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏!\n"
                          f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–æ–æ–±—â–∏—Ç—å –∫–∞–∫–∏–µ —Ç–∞–º —Å–µ–π—á–∞—Å —Ä–∏—Å–∫–∏.\n"
                          "–î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è —Å https://pollen.club"
                          "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
                          "–ù–∞–ø–∏—à–∏ /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                     reply_markup=create_keyboard(['/help']))


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def support(message):
    bot.send_message(message.from_user.id,
                     text="/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                          "/help - –ø–æ–º–æ—â—å\n"
                          "/solve_task - –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø—Ä–æ—Å—É –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\n\n"
                          "PS: –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ, –∞ –º–æ–¥–µ–ª—å gpt - —Å–ª–∞–±–æ–≤–∞—Ç–∞, –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–∏–Ω—è—é—Å—å üòø",
                     reply_markup=create_keyboard(["/solve_task"]))


# –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –±–æ—Ç–∞
def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


def filter_hi(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


def filter_wasup(message):
    word = "–∫–∞–∫ –¥–µ–ª–∞?"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_bye)
def say_bye(message):
    user_name = message.from_user.first_name
    logging.info("—Å –∫–µ–º-—Ç–æ –ø–æ–ø—Ä–æ—â–∞–ª–∏—Å—å")
    bot.send_message(message.from_user.id, text=f"{user_name}, –ø–æ–∫–∞...")


@bot.message_handler(content_types=['text'], func=filter_wasup)
def say_wasup(message):
    logging.info("–∫–æ–º—É-—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏, –∫–∞–∫ –¥–µ–ª–∞")
    bot.send_message(message.from_user.id, text=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª_–∞! –î–µ–ª–∞ –æ—Ç–ª–∏—á–Ω–æ! üëç")


@bot.message_handler(content_types=['text'], func=filter_hi)
def say_wasup(message):
    user_name = message.from_user.first_name
    logging.info("—Å –∫–µ–º-—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å")
    bot.send_message(message.from_user.id, text=f"{user_name}, –ü—Ä–∏–≤–µ—Ç! üôÉ")


# –∫–æ–º–∞–Ω–¥–∞ –¥–µ–±–∞–≥, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ —Ñ–∞–π–ª–æ–º
@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)
    logging.info("–ö—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–±–∞–≥...")


# –ö–æ–º–∞–Ω–¥–∞ /solve_task –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_promt() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—é–±–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['solve_task'])
def solve_task(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, get_promt)


# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ—á–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
def continue_filter(message):
    button_text = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
    return message.text == button_text


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
@bot.message_handler(func=continue_filter)
def get_promt(message):
    user_id = str(message.from_user.id)
    if not message.text:
        bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòæ")
        bot.register_next_step_handler(message, get_promt)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_request = message.text
    if gpt.count_tokens(user_request) >= gpt.MAX_TOKENS:
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üòø\n–ò—Å–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å")
        logging.info("–£ –∫–æ–≥–æ-—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—ã—Å–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤")
        bot.register_next_step_handler(message, get_promt)
        return

    if user_id not in users_history or users_history[user_id] == {}:
        if user_request == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. üòü")
            bot.register_next_step_handler(message, get_promt)
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ GPT –≤ —Å–ª–æ–≤–∞—Ä–∏–∫ users_history
        users_history[user_id] = {
            'system_content': (
                "–¢—ã –±–æ—Ç, —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ø—ã–ª—å—Ü—É —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏."
                "–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ https://pollen.club"
                "–û–ø–∏—à–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è –æ—Ä–µ—à–Ω–∏–∫–∞ –∏ –æ–ª—å—Ö–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ–±—â–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–ª–ª–µ—Ä–≥–µ–Ω–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–∏—Ö –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10."),
            'user_content': user_request,
            'assistant_content': "–ü–∏—à–µ–º –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –ø—ã–ª—å—Ü—É: "
        }
        save_to_json()

    prompt = gpt.make_promt(users_history[user_id])
    resp = gpt.send_request(prompt)
    answer = resp.json()['choices'][0]['message']['content']
    users_history[user_id]["assistant_content"] += answer
    save_to_json()

    keyboard = create_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
    bot.send_message(message.chat.id, answer, reply_markup=keyboard)


@bot.message_handler(commands=['end'])
@bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å")
def end_task(message):
    user_id = message.from_user.id
    logging.info("–ß—å—ë-—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å")
    bot.send_message(user_id, "–¢–µ–∫—É—â–∏–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    users_history[user_id] = {}
    solve_task(message)


if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
